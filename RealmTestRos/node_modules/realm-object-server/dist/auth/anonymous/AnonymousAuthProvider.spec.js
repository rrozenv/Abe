"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const chai = require("chai");
chai.use(require('chai-as-promised'));
const AnonymousAuthProvider_1 = require("./AnonymousAuthProvider");
const TestServer_1 = require("../../TestServer");
describe('AnonymousAuthProvider', () => {
    let provider;
    let server;
    before(() => __awaiter(this, void 0, void 0, function* () {
        server = new TestServer_1.TestServer();
        provider = new AnonymousAuthProvider_1.AnonymousAuthProvider();
        yield server.start({
            authProviders: [provider],
        });
    }));
    after(() => __awaiter(this, void 0, void 0, function* () {
        if (server) {
            yield server.shutdown();
        }
    }));
    it('logs a user in', () => __awaiter(this, void 0, void 0, function* () {
        const user = yield provider.authenticateOrCreateUser(undefined);
        chai_1.assert.isDefined(user);
        chai_1.assert.isTrue(user.created);
        chai_1.assert.isFalse(user.isAdmin);
        chai_1.assert.isDefined(user.userId);
        chai_1.assert.equal(user.accounts[0].provider, 'anonymous');
        chai_1.assert.isDefined(user.accounts[0].providerId);
    }));
});
//# sourceMappingURL=AnonymousAuthProvider.spec.js.map