"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const superagent = require("superagent");
const URI = require("urijs");
const ServiceClientBase_1 = require("./ServiceClientBase");
const errors = require("../errors");
class SyncClient extends ServiceClientBase_1.ServiceClientBase {
    constructor() {
        super(...arguments);
        this.serviceName = 'sync';
        this.baseRoute = undefined;
    }
    deleteRealm(realmPath) {
        return __awaiter(this, void 0, void 0, function* () {
            const service = yield this.findService();
            if (!service) {
                throw new errors.realm.ServiceUnavailable();
            }
            const route = new URI(`http://${service.address}:${service.port}`)
                .segment(['api', 'realm', realmPath])
                .toString();
            const request = superagent.delete(route);
            return yield this.executeRequest(request, `Realm-Access-Token version=1 token="${this.adminToken}"`);
        });
    }
}
exports.SyncClient = SyncClient;
//# sourceMappingURL=SyncClient.js.map