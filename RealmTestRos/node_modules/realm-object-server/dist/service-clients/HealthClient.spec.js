"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const chai = require("chai");
chai.use(require("chai-as-promised"));
const TestServer_1 = require("../TestServer");
describe('HealthClient', () => {
    let server;
    let healthService;
    before(() => __awaiter(this, void 0, void 0, function* () {
        server = new TestServer_1.TestServer();
        yield server.start();
        healthService = server.getService('health');
    }));
    after(() => __awaiter(this, void 0, void 0, function* () {
        yield server.shutdown();
    }));
    describe('when server has started', () => {
        it('returns true', () => __awaiter(this, void 0, void 0, function* () {
            const result = yield chai_1.assert.isFulfilled(server.healthClient.hasServerStarted());
            chai_1.assert.isTrue(result);
        }));
    });
    describe("when the server hasn't started", () => {
        it('returns false', () => __awaiter(this, void 0, void 0, function* () {
            healthService['started'] = false;
            const result = yield chai_1.assert.isFulfilled(server.healthClient.hasServerStarted());
            chai_1.assert.isFalse(result);
        }));
    });
});
//# sourceMappingURL=HealthClient.spec.js.map