export interface TokenParams {
    identity: string;
    appId: string;
    expires?: number;
    salt?: string;
    canSkipRevocationCheck?: boolean;
}
export declare function isAdminToken(token: Token): boolean;
export declare abstract class Token {
    static parse(tokenString: string, publicKey: string, throwIfExpiredToken?: boolean): Token;
    readonly identity: string;
    readonly appId: string;
    readonly expires: number;
    readonly access: string[];
    readonly salt: string;
    readonly canSkipRevocationCheck: boolean;
    constructor(params: TokenParams);
    toJSON(): any;
    data(): string;
    encodedData(): string;
    sign(privateKey: any): string;
}
export interface RefreshTokenParams extends TokenParams {
    isAdmin: boolean;
}
export declare class RefreshToken extends Token {
    readonly isAdmin: boolean;
    readonly access: string[];
    constructor(params: RefreshTokenParams);
    toJSON(): any;
}
export interface AccessTokenParams extends TokenParams {
    access: string[];
    path?: string;
    syncLabel?: string;
}
export declare class AccessToken extends Token {
    readonly access: string[];
    readonly path: string | undefined;
    readonly syncLabel: string;
    constructor(params: AccessTokenParams);
    toJSON(): any;
    isAdminToken(): boolean;
}
export interface IAdminTokenParams {
    privateKey: string;
    expires?: number;
    access?: string[];
    appId?: string;
    canSkipRevocationCheck?: boolean;
}
export declare function generateAdminToken({privateKey, expires, access, appId, canSkipRevocationCheck}: IAdminTokenParams): string;
