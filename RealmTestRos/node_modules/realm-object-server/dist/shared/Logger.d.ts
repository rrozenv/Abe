/// <reference types="node" />
import * as events from "events";
export declare enum SyncLogLevel {
    all = 0,
    trace = 1,
    debug = 2,
    detail = 3,
    info = 4,
    warn = 5,
    error = 6,
    fatal = 7,
    off = 8,
}
export declare const levels: {};
export declare abstract class Logger extends events.EventEmitter {
    withContext(ctx: object): Logger;
    abstract log(level: string, msg: string, ctx?: object): any;
    close(): void;
    trace(msg: string, ctx?: object): void;
    debug(msg: string, ctx?: object): void;
    detail(msg: string, ctx?: object): void;
    info(msg: string, ctx?: object): void;
    warn(msg: string, ctx?: object): void;
    error(msg: string, ctx?: object): void;
    fatal(msg: string, ctx?: object): void;
}
export declare class MuteLogger extends Logger {
    log(level: string, msg: string, ctx?: object): void;
}
export declare class ThrowingLogger extends Logger {
    protected levels: string[];
    constructor(levels?: string[]);
    log(level: string, msg: string, ctx?: object): void;
}
export declare class WinstonLogger extends Logger {
    private impl;
    private earlyMessages;
    private earlyMessagesSkipped;
    constructor(level?: string, bufsize?: number);
    emit(topic: string, level: string, msg: string, ctx: object): boolean;
    private dumpBuffer();
    on(topic: string | symbol, listener: (...args: any[]) => void): this;
    addListener(topic: string | symbol, listener: (...args: any[]) => void): this;
    log(level: string, msg: string, ctx?: any): void;
    close(): void;
    private add(transportClass, params);
    protected addConsole(): void;
    protected addFile(filename: string): void;
}
export declare class ConsoleLogger extends WinstonLogger {
    constructor(level?: string);
}
export declare class FileLogger extends WinstonLogger {
    constructor(filename: string, level?: string);
}
export declare class FileConsoleLogger extends WinstonLogger {
    constructor(filename?: string, level?: string);
}
