/// <reference types="node" />
import { IService } from "../Service";
import { EventEmitter } from 'events';
export interface IPermissionsServiceEventEmitter {
    on(event: 'handlePermissionChange', listener: (changeEvent: Realm.Sync.ChangeEvent) => void): this;
    on(event: 'handleUserSpecificManagementChange', listener: (changeEvent: Realm.Sync.ChangeEvent) => void): this;
}
export interface IPermissionChangeRequest {
    condition: Realm.Sync.PermissionCondition;
    realmPath: string;
    accessLevel: Realm.Sync.AccessLevel;
}
export declare class PermissionsService extends EventEmitter implements IPermissionsServiceEventEmitter, IService {
    private static MANAGEMENT_REALM_REGEX;
    private static ADMIN_REALM_REGEX;
    private adminRealm;
    private legacyWildcardPermissionRealm;
    private wildcardPermissionRealm;
    private publicKey;
    private logger;
    private server;
    private handleManagementChangeCallback;
    private handleAdminChangeCallback;
    private static extractPermission(p);
    private static ensureInTransaction(mirror);
    private static getPrimaryKey(permission);
    private getManagementRealmForUserId(userId);
    private getUserSpecificPermissionRealm(userId, legacy?);
    private start(server);
    private stop();
    private onDemand(req);
    private applyPermissions(req, permissionRequest);
    private unreflectPermissionIn(permission, mirror, legacy?);
    private reflectPermissionIn(permission, mirror, legacy?);
    private getUserByUserId(userId);
    private getUserIdsWithMetadata(key, value);
    private grantReadOnlyAccessToWildcardPermissionRealm();
    private grantReadWriteOnLegacyUserPermissionRealms();
    private applyPermissionChangeInAdminRealm(input);
    private handleAdminRealmChange(changeEvent);
    private handleManagementRealmChange(changeEvent);
    private handlePermissionOfferObject(permissionOffer, owner, realm);
    private handlePermissionOfferResponseObject(permissionOfferResponse, owner, realm);
    private handlePermissionChangeObject(permissionChange, owner, realm);
    private validateUserIdCanChangePermissionsForPath(owner, path);
}
