/// <reference types="express" />
import { IService, IServiceConstructor } from "./Service";
import { RequestHandler } from "express";
export declare function Get(path: string): (target: IService, propertyKey: string, descriptor: PropertyDescriptor) => void;
export declare function Post(path: string): (target: IService, propertyKey: string, descriptor: PropertyDescriptor) => void;
export declare function Put(path: string): (target: IService, propertyKey: string, descriptor: PropertyDescriptor) => void;
export declare function Delete(path: string): (target: IService, propertyKey: string, descriptor: PropertyDescriptor) => void;
export declare function Options(path: string): (target: IService, propertyKey: string, descriptor: PropertyDescriptor) => void;
export declare function Head(path: string): (target: IService, propertyKey: string, descriptor: PropertyDescriptor) => void;
export declare function Trace(path: string): (target: IService, propertyKey: string, descriptor: PropertyDescriptor) => void;
export declare function Patch(path: string): (target: IService, propertyKey: string, descriptor: PropertyDescriptor) => void;
export declare function All(path: string): (target: IService, propertyKey: string, descriptor: PropertyDescriptor) => void;
export declare function Upgrade(path: string): (target: IService, propertyKey: string, descriptor: PropertyDescriptor) => void;
export declare function MiddlewaresBefore(...middlewares: RequestHandler[]): (target: IServiceConstructor | IService, propertyKey?: string, descriptor?: PropertyDescriptor) => void;
export declare function BaseRoute(path: string): (target: IServiceConstructor) => void;
export declare function ServiceName(name: string): (target: IServiceConstructor) => void;
export declare function Tags(tags: string[]): (target: IServiceConstructor) => void;
export declare function ServeStatic(route: string, staticRoot: string): (target: IServiceConstructor) => any;
export declare function Body(keyPath?: string): (target: IService, functionName: string, argumentIndex: number) => void;
export declare function Headers(keyPath?: string | string): (target: IService, functionName: string, argumentIndex: number) => void;
export declare function Params(keyPath?: string | string[]): (target: IService, functionName: string, argumentIndex: number) => void;
export declare function Query(keyPath?: string): (target: IService, functionName: string, argumentIndex: number) => void;
export declare function Request(): (target: IService, functionName: string, argumentIndex: number) => void;
export declare function Response(): (target: IService, functionName: string, argumentIndex: number) => void;
export declare function Socket(): (target: IService, functionName: string, argumentIndex: number) => void;
export declare function HeadBuffer(): (target: IService, functionName: string, argumentIndex: number) => void;
export declare function Next(): (target: IService, functionName: string, argumentIndex: number) => void;
export declare function Start(): (target: IService, propertyKey: string, descriptor: PropertyDescriptor) => void;
export declare function Stop(): (target: IService, propertyKey: string, descriptor: PropertyDescriptor) => void;
export declare function ServerStarted(): (target: IService, propertyKey: string, descriptor: PropertyDescriptor) => void;
export declare function Address(): (target: IService, propertyKey: string, descriptor: PropertyDescriptor) => void;
export declare function Unmute(contextual?: boolean): (target: IService, propertyKey: string, descriptor: PropertyDescriptor) => void;
